# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from car/pid.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class pid(genpy.Message):
  _md5sum = "87da0e9e14c5b44deff5947cc352d507"
  _type = "car/pid"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 setpoint
float32 laster
float32 err
float32 wndup
float32 kp
float32 kd
float32 ki
float32 out
float64 fdbck
float32 iterm
float32 pterm
float32 dterm
float32 delterr
float32 delttime
"""
  __slots__ = ['setpoint','laster','err','wndup','kp','kd','ki','out','fdbck','iterm','pterm','dterm','delterr','delttime']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float64','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       setpoint,laster,err,wndup,kp,kd,ki,out,fdbck,iterm,pterm,dterm,delterr,delttime

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(pid, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.setpoint is None:
        self.setpoint = 0.
      if self.laster is None:
        self.laster = 0.
      if self.err is None:
        self.err = 0.
      if self.wndup is None:
        self.wndup = 0.
      if self.kp is None:
        self.kp = 0.
      if self.kd is None:
        self.kd = 0.
      if self.ki is None:
        self.ki = 0.
      if self.out is None:
        self.out = 0.
      if self.fdbck is None:
        self.fdbck = 0.
      if self.iterm is None:
        self.iterm = 0.
      if self.pterm is None:
        self.pterm = 0.
      if self.dterm is None:
        self.dterm = 0.
      if self.delterr is None:
        self.delterr = 0.
      if self.delttime is None:
        self.delttime = 0.
    else:
      self.setpoint = 0.
      self.laster = 0.
      self.err = 0.
      self.wndup = 0.
      self.kp = 0.
      self.kd = 0.
      self.ki = 0.
      self.out = 0.
      self.fdbck = 0.
      self.iterm = 0.
      self.pterm = 0.
      self.dterm = 0.
      self.delterr = 0.
      self.delttime = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8fd5f().pack(_x.setpoint, _x.laster, _x.err, _x.wndup, _x.kp, _x.kd, _x.ki, _x.out, _x.fdbck, _x.iterm, _x.pterm, _x.dterm, _x.delterr, _x.delttime))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 60
      (_x.setpoint, _x.laster, _x.err, _x.wndup, _x.kp, _x.kd, _x.ki, _x.out, _x.fdbck, _x.iterm, _x.pterm, _x.dterm, _x.delterr, _x.delttime,) = _get_struct_8fd5f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8fd5f().pack(_x.setpoint, _x.laster, _x.err, _x.wndup, _x.kp, _x.kd, _x.ki, _x.out, _x.fdbck, _x.iterm, _x.pterm, _x.dterm, _x.delterr, _x.delttime))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 60
      (_x.setpoint, _x.laster, _x.err, _x.wndup, _x.kp, _x.kd, _x.ki, _x.out, _x.fdbck, _x.iterm, _x.pterm, _x.dterm, _x.delterr, _x.delttime,) = _get_struct_8fd5f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8fd5f = None
def _get_struct_8fd5f():
    global _struct_8fd5f
    if _struct_8fd5f is None:
        _struct_8fd5f = struct.Struct("<8fd5f")
    return _struct_8fd5f
