// Generated by gencpp from file crazyflie_scripts/camera_msg.msg
// DO NOT EDIT!


#ifndef CRAZYFLIE_SCRIPTS_MESSAGE_CAMERA_MSG_H
#define CRAZYFLIE_SCRIPTS_MESSAGE_CAMERA_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace crazyflie_scripts
{
template <class ContainerAllocator>
struct camera_msg_
{
  typedef camera_msg_<ContainerAllocator> Type;

  camera_msg_()
    : ext_x_cam(0.0)
    , ext_y_cam(0.0)
    , track_x(0.0)
    , track_y(0.0)
    , track_z(0.0)
    , x_dir_tt(0.0)
    , y_dir_tt(0.0)
    , tg_yaw_t(0.0)  {
    }
  camera_msg_(const ContainerAllocator& _alloc)
    : ext_x_cam(0.0)
    , ext_y_cam(0.0)
    , track_x(0.0)
    , track_y(0.0)
    , track_z(0.0)
    , x_dir_tt(0.0)
    , y_dir_tt(0.0)
    , tg_yaw_t(0.0)  {
  (void)_alloc;
    }



   typedef float _ext_x_cam_type;
  _ext_x_cam_type ext_x_cam;

   typedef float _ext_y_cam_type;
  _ext_y_cam_type ext_y_cam;

   typedef float _track_x_type;
  _track_x_type track_x;

   typedef float _track_y_type;
  _track_y_type track_y;

   typedef float _track_z_type;
  _track_z_type track_z;

   typedef float _x_dir_tt_type;
  _x_dir_tt_type x_dir_tt;

   typedef float _y_dir_tt_type;
  _y_dir_tt_type y_dir_tt;

   typedef float _tg_yaw_t_type;
  _tg_yaw_t_type tg_yaw_t;





  typedef boost::shared_ptr< ::crazyflie_scripts::camera_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::crazyflie_scripts::camera_msg_<ContainerAllocator> const> ConstPtr;

}; // struct camera_msg_

typedef ::crazyflie_scripts::camera_msg_<std::allocator<void> > camera_msg;

typedef boost::shared_ptr< ::crazyflie_scripts::camera_msg > camera_msgPtr;
typedef boost::shared_ptr< ::crazyflie_scripts::camera_msg const> camera_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::crazyflie_scripts::camera_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::crazyflie_scripts::camera_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::crazyflie_scripts::camera_msg_<ContainerAllocator1> & lhs, const ::crazyflie_scripts::camera_msg_<ContainerAllocator2> & rhs)
{
  return lhs.ext_x_cam == rhs.ext_x_cam &&
    lhs.ext_y_cam == rhs.ext_y_cam &&
    lhs.track_x == rhs.track_x &&
    lhs.track_y == rhs.track_y &&
    lhs.track_z == rhs.track_z &&
    lhs.x_dir_tt == rhs.x_dir_tt &&
    lhs.y_dir_tt == rhs.y_dir_tt &&
    lhs.tg_yaw_t == rhs.tg_yaw_t;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::crazyflie_scripts::camera_msg_<ContainerAllocator1> & lhs, const ::crazyflie_scripts::camera_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace crazyflie_scripts

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::crazyflie_scripts::camera_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::crazyflie_scripts::camera_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::crazyflie_scripts::camera_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::crazyflie_scripts::camera_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crazyflie_scripts::camera_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crazyflie_scripts::camera_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::crazyflie_scripts::camera_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "512cd6d5f46f8407166dee36dcd1fc07";
  }

  static const char* value(const ::crazyflie_scripts::camera_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x512cd6d5f46f8407ULL;
  static const uint64_t static_value2 = 0x166dee36dcd1fc07ULL;
};

template<class ContainerAllocator>
struct DataType< ::crazyflie_scripts::camera_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "crazyflie_scripts/camera_msg";
  }

  static const char* value(const ::crazyflie_scripts::camera_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::crazyflie_scripts::camera_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 ext_x_cam\n"
"float32 ext_y_cam\n"
"float32 track_x\n"
"float32 track_y\n"
"float32 track_z\n"
"float32 x_dir_tt\n"
"float32 y_dir_tt\n"
"float32 tg_yaw_t\n"
;
  }

  static const char* value(const ::crazyflie_scripts::camera_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::crazyflie_scripts::camera_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ext_x_cam);
      stream.next(m.ext_y_cam);
      stream.next(m.track_x);
      stream.next(m.track_y);
      stream.next(m.track_z);
      stream.next(m.x_dir_tt);
      stream.next(m.y_dir_tt);
      stream.next(m.tg_yaw_t);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct camera_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::crazyflie_scripts::camera_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::crazyflie_scripts::camera_msg_<ContainerAllocator>& v)
  {
    s << indent << "ext_x_cam: ";
    Printer<float>::stream(s, indent + "  ", v.ext_x_cam);
    s << indent << "ext_y_cam: ";
    Printer<float>::stream(s, indent + "  ", v.ext_y_cam);
    s << indent << "track_x: ";
    Printer<float>::stream(s, indent + "  ", v.track_x);
    s << indent << "track_y: ";
    Printer<float>::stream(s, indent + "  ", v.track_y);
    s << indent << "track_z: ";
    Printer<float>::stream(s, indent + "  ", v.track_z);
    s << indent << "x_dir_tt: ";
    Printer<float>::stream(s, indent + "  ", v.x_dir_tt);
    s << indent << "y_dir_tt: ";
    Printer<float>::stream(s, indent + "  ", v.y_dir_tt);
    s << indent << "tg_yaw_t: ";
    Printer<float>::stream(s, indent + "  ", v.tg_yaw_t);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CRAZYFLIE_SCRIPTS_MESSAGE_CAMERA_MSG_H
