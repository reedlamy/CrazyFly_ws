// Generated by gencpp from file crazyflie_scripts/camera_msg.msg
// DO NOT EDIT!


#ifndef CRAZYFLIE_SCRIPTS_MESSAGE_CAMERA_MSG_H
#define CRAZYFLIE_SCRIPTS_MESSAGE_CAMERA_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace crazyflie_scripts
{
template <class ContainerAllocator>
struct camera_msg_
{
  typedef camera_msg_<ContainerAllocator> Type;

  camera_msg_()
    : ext_x(0)
    , ext_y(0)
    , t_x(0)
    , t_y(0)
    , x_dir_tt(0)
    , y_dir_tt(0)  {
    }
  camera_msg_(const ContainerAllocator& _alloc)
    : ext_x(0)
    , ext_y(0)
    , t_x(0)
    , t_y(0)
    , x_dir_tt(0)
    , y_dir_tt(0)  {
  (void)_alloc;
    }



   typedef int32_t _ext_x_type;
  _ext_x_type ext_x;

   typedef int32_t _ext_y_type;
  _ext_y_type ext_y;

   typedef int32_t _t_x_type;
  _t_x_type t_x;

   typedef int32_t _t_y_type;
  _t_y_type t_y;

   typedef int32_t _x_dir_tt_type;
  _x_dir_tt_type x_dir_tt;

   typedef int32_t _y_dir_tt_type;
  _y_dir_tt_type y_dir_tt;





  typedef boost::shared_ptr< ::crazyflie_scripts::camera_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::crazyflie_scripts::camera_msg_<ContainerAllocator> const> ConstPtr;

}; // struct camera_msg_

typedef ::crazyflie_scripts::camera_msg_<std::allocator<void> > camera_msg;

typedef boost::shared_ptr< ::crazyflie_scripts::camera_msg > camera_msgPtr;
typedef boost::shared_ptr< ::crazyflie_scripts::camera_msg const> camera_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::crazyflie_scripts::camera_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::crazyflie_scripts::camera_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::crazyflie_scripts::camera_msg_<ContainerAllocator1> & lhs, const ::crazyflie_scripts::camera_msg_<ContainerAllocator2> & rhs)
{
  return lhs.ext_x == rhs.ext_x &&
    lhs.ext_y == rhs.ext_y &&
    lhs.t_x == rhs.t_x &&
    lhs.t_y == rhs.t_y &&
    lhs.x_dir_tt == rhs.x_dir_tt &&
    lhs.y_dir_tt == rhs.y_dir_tt;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::crazyflie_scripts::camera_msg_<ContainerAllocator1> & lhs, const ::crazyflie_scripts::camera_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace crazyflie_scripts

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::crazyflie_scripts::camera_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::crazyflie_scripts::camera_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::crazyflie_scripts::camera_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::crazyflie_scripts::camera_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crazyflie_scripts::camera_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crazyflie_scripts::camera_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::crazyflie_scripts::camera_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0528b01776a9faff38d86476b22e6f80";
  }

  static const char* value(const ::crazyflie_scripts::camera_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0528b01776a9faffULL;
  static const uint64_t static_value2 = 0x38d86476b22e6f80ULL;
};

template<class ContainerAllocator>
struct DataType< ::crazyflie_scripts::camera_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "crazyflie_scripts/camera_msg";
  }

  static const char* value(const ::crazyflie_scripts::camera_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::crazyflie_scripts::camera_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 ext_x\n"
"int32 ext_y\n"
"int32 t_x\n"
"int32 t_y\n"
"int32 x_dir_tt\n"
"int32 y_dir_tt\n"
;
  }

  static const char* value(const ::crazyflie_scripts::camera_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::crazyflie_scripts::camera_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ext_x);
      stream.next(m.ext_y);
      stream.next(m.t_x);
      stream.next(m.t_y);
      stream.next(m.x_dir_tt);
      stream.next(m.y_dir_tt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct camera_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::crazyflie_scripts::camera_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::crazyflie_scripts::camera_msg_<ContainerAllocator>& v)
  {
    s << indent << "ext_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ext_x);
    s << indent << "ext_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ext_y);
    s << indent << "t_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.t_x);
    s << indent << "t_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.t_y);
    s << indent << "x_dir_tt: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x_dir_tt);
    s << indent << "y_dir_tt: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y_dir_tt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CRAZYFLIE_SCRIPTS_MESSAGE_CAMERA_MSG_H
