// Generated by gencpp from file car/pid.msg
// DO NOT EDIT!


#ifndef CAR_MESSAGE_PID_H
#define CAR_MESSAGE_PID_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace car
{
template <class ContainerAllocator>
struct pid_
{
  typedef pid_<ContainerAllocator> Type;

  pid_()
    : setpoint(0.0)
    , laster(0.0)
    , err(0.0)
    , wndup(0.0)
    , kp(0.0)
    , kd(0.0)
    , ki(0.0)
    , out(0.0)
    , fdbck(0.0)
    , iterm(0.0)
    , pterm(0.0)
    , dterm(0.0)
    , delterr(0.0)
    , delttime(0.0)  {
    }
  pid_(const ContainerAllocator& _alloc)
    : setpoint(0.0)
    , laster(0.0)
    , err(0.0)
    , wndup(0.0)
    , kp(0.0)
    , kd(0.0)
    , ki(0.0)
    , out(0.0)
    , fdbck(0.0)
    , iterm(0.0)
    , pterm(0.0)
    , dterm(0.0)
    , delterr(0.0)
    , delttime(0.0)  {
  (void)_alloc;
    }



   typedef float _setpoint_type;
  _setpoint_type setpoint;

   typedef float _laster_type;
  _laster_type laster;

   typedef float _err_type;
  _err_type err;

   typedef float _wndup_type;
  _wndup_type wndup;

   typedef float _kp_type;
  _kp_type kp;

   typedef float _kd_type;
  _kd_type kd;

   typedef float _ki_type;
  _ki_type ki;

   typedef float _out_type;
  _out_type out;

   typedef double _fdbck_type;
  _fdbck_type fdbck;

   typedef float _iterm_type;
  _iterm_type iterm;

   typedef float _pterm_type;
  _pterm_type pterm;

   typedef float _dterm_type;
  _dterm_type dterm;

   typedef float _delterr_type;
  _delterr_type delterr;

   typedef float _delttime_type;
  _delttime_type delttime;





  typedef boost::shared_ptr< ::car::pid_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::car::pid_<ContainerAllocator> const> ConstPtr;

}; // struct pid_

typedef ::car::pid_<std::allocator<void> > pid;

typedef boost::shared_ptr< ::car::pid > pidPtr;
typedef boost::shared_ptr< ::car::pid const> pidConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::car::pid_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::car::pid_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::car::pid_<ContainerAllocator1> & lhs, const ::car::pid_<ContainerAllocator2> & rhs)
{
  return lhs.setpoint == rhs.setpoint &&
    lhs.laster == rhs.laster &&
    lhs.err == rhs.err &&
    lhs.wndup == rhs.wndup &&
    lhs.kp == rhs.kp &&
    lhs.kd == rhs.kd &&
    lhs.ki == rhs.ki &&
    lhs.out == rhs.out &&
    lhs.fdbck == rhs.fdbck &&
    lhs.iterm == rhs.iterm &&
    lhs.pterm == rhs.pterm &&
    lhs.dterm == rhs.dterm &&
    lhs.delterr == rhs.delterr &&
    lhs.delttime == rhs.delttime;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::car::pid_<ContainerAllocator1> & lhs, const ::car::pid_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace car

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::car::pid_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car::pid_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car::pid_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car::pid_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car::pid_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car::pid_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::car::pid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "87da0e9e14c5b44deff5947cc352d507";
  }

  static const char* value(const ::car::pid_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x87da0e9e14c5b44dULL;
  static const uint64_t static_value2 = 0xeff5947cc352d507ULL;
};

template<class ContainerAllocator>
struct DataType< ::car::pid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "car/pid";
  }

  static const char* value(const ::car::pid_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::car::pid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 setpoint\n"
"float32 laster\n"
"float32 err\n"
"float32 wndup\n"
"float32 kp\n"
"float32 kd\n"
"float32 ki\n"
"float32 out\n"
"float64 fdbck\n"
"float32 iterm\n"
"float32 pterm\n"
"float32 dterm\n"
"float32 delterr\n"
"float32 delttime\n"
;
  }

  static const char* value(const ::car::pid_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::car::pid_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.setpoint);
      stream.next(m.laster);
      stream.next(m.err);
      stream.next(m.wndup);
      stream.next(m.kp);
      stream.next(m.kd);
      stream.next(m.ki);
      stream.next(m.out);
      stream.next(m.fdbck);
      stream.next(m.iterm);
      stream.next(m.pterm);
      stream.next(m.dterm);
      stream.next(m.delterr);
      stream.next(m.delttime);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pid_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::car::pid_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::car::pid_<ContainerAllocator>& v)
  {
    s << indent << "setpoint: ";
    Printer<float>::stream(s, indent + "  ", v.setpoint);
    s << indent << "laster: ";
    Printer<float>::stream(s, indent + "  ", v.laster);
    s << indent << "err: ";
    Printer<float>::stream(s, indent + "  ", v.err);
    s << indent << "wndup: ";
    Printer<float>::stream(s, indent + "  ", v.wndup);
    s << indent << "kp: ";
    Printer<float>::stream(s, indent + "  ", v.kp);
    s << indent << "kd: ";
    Printer<float>::stream(s, indent + "  ", v.kd);
    s << indent << "ki: ";
    Printer<float>::stream(s, indent + "  ", v.ki);
    s << indent << "out: ";
    Printer<float>::stream(s, indent + "  ", v.out);
    s << indent << "fdbck: ";
    Printer<double>::stream(s, indent + "  ", v.fdbck);
    s << indent << "iterm: ";
    Printer<float>::stream(s, indent + "  ", v.iterm);
    s << indent << "pterm: ";
    Printer<float>::stream(s, indent + "  ", v.pterm);
    s << indent << "dterm: ";
    Printer<float>::stream(s, indent + "  ", v.dterm);
    s << indent << "delterr: ";
    Printer<float>::stream(s, indent + "  ", v.delterr);
    s << indent << "delttime: ";
    Printer<float>::stream(s, indent + "  ", v.delttime);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAR_MESSAGE_PID_H
